source("C:/Users/nosal/OneDrive - Universidad Adolfo Ibanez/Codes/Universidad/Kernels/Repo/tarea 1/parte3.R", echo=TRUE)
w3[1]
plot(processTrain$calories, train$protein, main = 'OLS con estandarización', xlab = 'Calories', ylab = 'Proteins')
abline(w3[1], w3[2])
source("C:/Users/nosal/OneDrive - Universidad Adolfo Ibanez/Codes/Universidad/Kernels/Repo/tarea 1/parte3.R", echo=TRUE)
source("C:/Users/nosal/OneDrive - Universidad Adolfo Ibanez/Codes/Universidad/Kernels/Script_Regresion_Clase2.R", echo=TRUE)
source("C:/Users/nosal/OneDrive - Universidad Adolfo Ibanez/Codes/Universidad/Kernels/Repo/tarea 1/parte3.R", echo=TRUE)
source("C:/Users/nosal/OneDrive - Universidad Adolfo Ibanez/Codes/Universidad/Kernels/Repo/tarea 1/parte3.R", echo=TRUE)
X_pred <- cbind(rep(1,dim(processTest)[1]),processTest[["calories"]])
y_pred <- X_pred%*%w
y_pred
X_pred2 <- cbind(rep(1,dim(test)[1]),test[["calories"]])
y_pred2 <- X_pred2%*%w3
y_pred2
source("C:/Users/nosal/OneDrive - Universidad Adolfo Ibanez/Codes/Universidad/Kernels/Repo/tarea 1/parte3.R", echo=TRUE)
source("C:/Users/nosal/OneDrive - Universidad Adolfo Ibanez/Codes/Universidad/Kernels/Repo/tarea 1/parte3.R", echo=TRUE)
source("C:/Users/nosal/OneDrive - Universidad Adolfo Ibanez/Codes/Universidad/Kernels/Repo/tarea 1/parte3.R", echo=TRUE)
X_pred <- cbind(rep(1,dim(test)[1]),test[["calories"]])
y_pred <- X_pred%*%w
y_pred
X_pred2 <- cbind(rep(1,dim(processTest)[1]),processTest[["calories"]])
X_pred2 <- cbind(rep(1,dim(processTest)[1]),processTest[["calories"]])
y_pred2 <- X_pred2%*%w
y_pred2
X_pred2 <- cbind(rep(1,dim(processTest)[1]),processTest[["calories"]])
y_pred2 <- X_pred2%*%w2
y_pred2
y_pred2 <- X_pred2%*%w
y_pred2
X_pred2 <- cbind(rep(1,dim(processTest)[1]),processTest[["calories"]])
y_pred2 <- X_pred2%*%w
y_pred2
pacman::p_load(tidyverse, openintro, ggplot2, caret)
set.seed(23)
data(starbucks)
attach(starbucks)
summary(starbucks)
data <- select(starbucks, protein, calories)
index <- sample(1:5, 77, replace=TRUE)
data['grupo'] <- index
train <- data[which(data$grupo == 1 | data$grupo == 2 | data$grupo == 3 | data$grupo == 4),]
test <- data[which(data$grupo == 5),]
y <- train$protein
X <- cbind(rep(1,dim(train)[1]),train[["calories"]])
w <- solve(t(X)%*%X)%*%t(X)%*%y
w <- c(w)
w
modelo2 <- lm(protein~calories,data=train)
summary(modelo2)
w2 <- modelo2[["coefficients"]]
w2
processTrain <- train
processTest <- test
pre_proc_val <- preProcess(processTrain[,'calories'], method = c("center", "scale"))
processTrain[,'calories'] <- predict(pre_proc_val, processTrain[,'calories'])
processTest[,'calories'] <- predict(pre_proc_val, processTest[,'calories'])
y2 <- train$protein
X2 <- cbind(rep(1,dim(processTrain)[1]),processTrain[["calories"]])
w3 <- solve(t(X2)%*%X2)%*%t(X2)%*%y2
w3 <- c(w3)
w3
plot(train$calories, train$protein, main = 'OLS sin estandarización', xlab = 'Calories', ylab = 'Proteins')
abline(w[1], w[2])
plot(processTrain$calories, train$protein, main = 'OLS con estandarización', xlab = 'Calories', ylab = 'Proteins')
abline(w3[1], w3[2])
X_pred <- cbind(rep(1,dim(test)[1]),test[["calories"]])
y_pred <- X_pred%*%w
y_pred
X_pred2 <- cbind(rep(1,dim(processTest)[1]),processTest[["calories"]])
X_pred2 <- cbind(rep(1,dim(processTest)[1]),processTest[["calories"]])
y_pred2 <- X_pred2%*%w3
y_pred2
### Script pregunta 3
pacman::p_load(tidyverse, openintro, ggplot2, caret)
set.seed(23)
## Parte 1
data(starbucks)
attach(starbucks)
summary(starbucks)
data <- select(starbucks, protein, calories)
# Separamos la DB en 5 conjuntos de datos.
index <- sample(1:5, 77, replace=TRUE)
data['grupo'] <- index
# Creamos dataset de entrenamiento y prueba.
train <- data[which(data$grupo == 1 | data$grupo == 2 | data$grupo == 3 | data$grupo == 4),]
test <- data[which(data$grupo == 5),]
# Estimando los coeficientes de regresión con Mínimos Cuadrados
y <- train$protein
X <- cbind(rep(1,dim(train)[1]),train[["calories"]])
w <- solve(t(X)%*%X)%*%t(X)%*%y
w <- c(w)
w
# Estimando los coeficientes de regresión con la función lm()
modelo2 <- lm(protein~calories,data=train)
summary(modelo2)
w2 <- modelo2[["coefficients"]]
w2
pacman::p_load(tidyverse, openintro, ggplot2, caret)
set.seed(23)
data(starbucks)
attach(starbucks)
summary(starbucks)
data <- select(starbucks, protein, calories)
index <- sample(1:5, 77, replace=TRUE)
data['grupo'] <- index
train <- data[which(data$grupo == 1 | data$grupo == 2 | data$grupo == 3 | data$grupo == 4),]
test <- data[which(data$grupo == 5),]
y <- train$protein
X <- cbind(rep(1,dim(train)[1]),train[["calories"]])
w <- solve(t(X)%*%X)%*%t(X)%*%y
w
plot(train$calories, train$protein, main = 'OLS sin estandarización', xlab = 'Calories', ylab = 'Proteins')
abline(w[1], w[2])
w[1]
w[2]
source("C:/Users/nosal/OneDrive - Universidad Adolfo Ibanez/Codes/Universidad/Kernels/Script_Regresion_Clase2.R", echo=TRUE)
rm(list=ls())
#install.packages("ggplot2")
library("ggplot2")
library("caret")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
# Datos economics                                                      #
#----------------------------------------------------------------------#
#Descripción de los datos:                                             #
#                                                                      #
#-date: mes/año de recolección de la observación                       #
#-pce: gastos de consumo personal, en miles de millones de dólares     #
#-pop: población total, en miles                                       #
#-psavert: tasa de ahorro personal                                     #
#-uempmed: duración media del desempleo, en semanas                    #
#-unemploy :Número de desempleados en miles                            #
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#Cargamos los datos
data(economics)
attach(economics)
economics[["unemploy"]]=economics[["unemploy"]]/1000
economics[["pop"]]=economics[["pop"]]/1000
fix(economics) #visualización
#Resumen datos economics
summary(economics)
#Visualización de los datos en ggplot
p <- ggplot(data=economics, aes(x=as.Date(date), y=unemploy)) +
geom_line( color="steelblue") +
geom_point() +
xlab("") +
theme(axis.text.x=element_text(angle=60, hjust=1)) +
scale_x_date(limit=c(as.Date("1967-07-01"),as.Date("2015-04-01")),date_breaks="12 month")
#scale_x_date(date_labels="%y %b %d")
#pdf(file="/home/tami/Dropbox/Cursos UAI/Kernel Methods/clase1/Pictures/Unemploy.pdf",width=12)
print(p)
#dev.off()
#Visualización de las variables en función del tiempo
par(mfrow=c(3,1))
plot(1:574,psavert,type="l",col="black")
points(1:574,psavert,col="black",pch=19)
plot(1:574,uempmed,type="l",col="red")
points(1:574,uempmed,col="red",pch=19)
plot(1:574,unemploy,type="l",col="blue")
points(1:574,unemploy,col="blue",pch=19)
##Separamos la base de datos en dos conjuntos: train y test
set.seed(100)
index = sample(1:nrow(economics),0.7*nrow(economics),replace=FALSE)
index=sort(index)
train = economics[index,] # Creamos datos de entrenamiento
test = economics[-index,] # Creamos datos de evaluación
dim(train)
dim(test)
##Pre-procesamiento (estandarización de datos)
#Creamos una copia de los conjuntos de datos train y test
ptrain=train
ptest=test
#Utilizamos la función preProcess para estandarizar los datos
cols = c('pce', 'pop', 'psavert', 'uempmed')
pre_proc_val <- preProcess(ptrain[,cols], method = c("center", "scale"))
#Method:
#- center: resta la media
#- scale: divide por la desviación estándar
#Con la función predict que recibe el objeto "pre_proc_val" estamos estandarizando el set de entrenamiento y el de testeo
ptrain[,cols] = predict(pre_proc_val, ptrain[,cols])
ptest[,cols] = predict(pre_proc_val, ptest[,cols])
summary(train)
summary(ptrain)
######################
## Regresión Lineal ##
######################
#Podemos utilizar la función lm para ajustar el modelo de regresión
model1=lm(unemploy~uempmed+psavert+pop+pce,data=ptrain)
summary(model1)
#~~~~~~~~~~~~~#
#Coeficientes #
#~~~~~~~~~~~~~#
#Obtenemos los coeficientes del modelo y los guardamos en el vector w
w=model1[["coefficients"]]
w
#Note que tambien podemos calcular los coeficientes del modelo de regresión lineal "a mano".
#Para esto seguimos los siguientes pasos:
#1) Programamos la matriz de diseño
X=cbind(rep(1,dim(ptrain)[1]),ptrain[["uempmed"]],ptrain[["psavert"]],ptrain[["pop"]],ptrain[["pce"]])
#2) Calculamos los coeficientes usando el estimador de minimos cuadrados usando
# X: es la matriz de diseño
# y: es la variable respuesta
y=ptrain[["unemploy"]]
w_manual=solve(t(X)%*%X)%*%t(X)%*%y
w_manual
#Note w y w_manual tienen los mismos valores
w
w_manual
#~~~~~~~~~~~~~~~~~~#
#Valores ajustados #
#~~~~~~~~~~~~~~~~~~#
#También podemos obtener los valores ajustados.
#Recuerde que los valores ajustados que se calculan son los valores "hat y" que predice nuestro modelo de regresion
hat_y=model1[["fitted.values"]]
hat_y
#Tambien podemos calcular los valores ajustados "a mano" multiplicando la matriz de diseño por w_manual
hat_y_manual=X%*%w_manual
hat_y_manual
#Compare hat_y y hat_y_manual para darse cuenta que son iguales. Esto lo podemos hacer, por ejemplo, graficando todo en un mismo gráfico
n=length(y)
n
plot(1:n,y,type="l")
points(1:n,hat_y,col="2")
points(1:n,hat_y_manual,col="3")
### Script pregunta 3
pacman::p_load(tidyverse, openintro, ggplot2, caret)
set.seed(23)
## Parte 1
data(starbucks)
attach(starbucks)
summary(starbucks)
data <- select(starbucks, protein, calories)
# Separamos la DB en 5 conjuntos de datos.
index <- sample(1:5, 77, replace=TRUE)
data['grupo'] <- index
# Creamos dataset de entrenamiento y prueba.
train <- data[which(data$grupo == 1 | data$grupo == 2 | data$grupo == 3 | data$grupo == 4),]
test <- data[which(data$grupo == 5),]
# Estimando los coeficientes de regresión con Mínimos Cuadrados
y <- train$protein
X <- cbind(rep(1,dim(train)[1]),train[["calories"]])
w <- solve(t(X)%*%X)%*%t(X)%*%y
#w <- c(w)
w
# Estimando los coeficientes de regresión con la función lm()
modelo2 <- lm(protein~calories,data=train)
summary(modelo2)
w2 <- modelo2[["coefficients"]]
w2
# Estandarizando la columna calories
processTrain <- train
processTest <- test
pre_proc_val <- preProcess(processTrain[,'calories'], method = c("center", "scale"))
processTrain[,'calories'] <- predict(pre_proc_val, processTrain[,'calories'])
processTest[,'calories'] <- predict(pre_proc_val, processTest[,'calories'])
# Repitiendo OLS con la columna calories estandarizada
y2 <- train$protein
X2 <- cbind(rep(1,dim(processTrain)[1]),processTrain[["calories"]])
w3 <- solve(t(X2)%*%X2)%*%t(X2)%*%y2
w3
plot(train$calories, train$protein, main = 'OLS sin estandarización', xlab = 'Calories', ylab = 'Proteins')
?abline
w[1]
abline(coef=w)
plot(processTrain$calories, train$protein, main = 'OLS con estandarización', xlab = 'Calories', ylab = 'Proteins')
abline(coef=w3)
w3
w
### Script pregunta 3
pacman::p_load(tidyverse, openintro, ggplot2, caret)
set.seed(23)
## Parte 1
data(starbucks)
attach(starbucks)
summary(starbucks)
data <- select(starbucks, protein, calories, fat)
# Separamos la DB en 5 conjuntos de datos.
index <- sample(1:5, 77, replace=TRUE)
data['grupo'] <- index
# Creamos dataset de entrenamiento y prueba.
train <- data[which(data$grupo == 1 | data$grupo == 2 | data$grupo == 3 | data$grupo == 4),]
test <- data[which(data$grupo == 5),]
# Estimando los coeficientes de regresión con Mínimos Cuadrados
y <- train$protein
X <- cbind(rep(1,dim(train)[1]),train[["fat"]])
w <- solve(t(X)%*%X)%*%t(X)%*%y
w
# Estimando los coeficientes de regresión con la función lm()
modelo2 <- lm(protein~calories,data=train)
summary(modelo2)
w2 <- modelo2[["coefficients"]]
w2
# Estandarizando la columna calories
processTrain <- train
processTest <- test
pre_proc_val <- preProcess(processTrain[,'calories'], method = c("center", "scale"))
processTrain[,'calories'] <- predict(pre_proc_val, processTrain[,'calories'])
processTest[,'calories'] <- predict(pre_proc_val, processTest[,'calories'])
# Repitiendo OLS con la columna calories estandarizada
y2 <- train$protein
X2 <- cbind(rep(1,dim(processTrain)[1]),processTrain[["calories"]])
w3 <- solve(t(X2)%*%X2)%*%t(X2)%*%y2
w3
plot(train$calories, train$protein, main = 'OLS sin estandarización', xlab = 'Calories', ylab = 'Proteins')
abline(w)
plot(processTrain$calories, train$protein, main = 'OLS con estandarización', xlab = 'Calories', ylab = 'Proteins')
abline(w3)
plot(train$calories, train$fat, main = 'OLS sin estandarización', xlab = 'Calories', ylab = 'Proteins')
abline(w)
### Script pregunta 3
pacman::p_load(tidyverse, openintro, ggplot2, caret)
set.seed(23)
## Parte 1
data(starbucks)
attach(starbucks)
summary(starbucks)
data <- select(starbucks, protein, calories, fat)
# Separamos la DB en 5 conjuntos de datos.
index <- sample(1:5, 77, replace=TRUE)
data['grupo'] <- index
# Creamos dataset de entrenamiento y prueba.
train <- data[which(data$grupo == 1 | data$grupo == 2 | data$grupo == 3 | data$grupo == 4),]
test <- data[which(data$grupo == 5),]
# Estimando los coeficientes de regresión con Mínimos Cuadrados
y <- train$protein
X <- cbind(rep(1,dim(train)[1]),train[["fat"]])
w <- solve(t(X)%*%X)%*%t(X)%*%y
w
# Estimando los coeficientes de regresión con la función lm()
modelo2 <- lm(protein~calories,data=train)
summary(modelo2)
w2 <- modelo2[["coefficients"]]
w2
# Estandarizando la columna calories
processTrain <- train
processTest <- test
pre_proc_val <- preProcess(processTrain[,'calories'], method = c("center", "scale"))
processTrain[,'calories'] <- predict(pre_proc_val, processTrain[,'calories'])
processTest[,'calories'] <- predict(pre_proc_val, processTest[,'calories'])
# Repitiendo OLS con la columna calories estandarizada
y2 <- train$protein
X2 <- cbind(rep(1,dim(processTrain)[1]),processTrain[["calories"]])
w3 <- solve(t(X2)%*%X2)%*%t(X2)%*%y2
w3
# Graficando OLS sin y con estandarización (arreglar, aún no funciona bien)
plot(train$calories, train$fat, main = 'OLS sin estandarización', xlab = 'Calories', ylab = 'Proteins')
abline(w)
plot(processTrain$calories, train$protein, main = 'OLS con estandarización', xlab = 'Calories', ylab = 'Proteins')
abline(w3)
### Script pregunta 3
pacman::p_load(tidyverse, openintro, ggplot2, caret)
set.seed(23)
## Parte 1
data(starbucks)
attach(starbucks)
summary(starbucks)
data <- select(starbucks, protein, calories, fat)
# Separamos la DB en 5 conjuntos de datos.
index <- sample(1:5, 77, replace=TRUE)
data['grupo'] <- index
# Creamos dataset de entrenamiento y prueba.
train <- data[which(data$grupo == 1 | data$grupo == 2 | data$grupo == 3 | data$grupo == 4),]
test <- data[which(data$grupo == 5),]
# Estimando los coeficientes de regresión con Mínimos Cuadrados
y <- train$protein
X <- cbind(rep(1,dim(train)[1]),train[["fat"]])
w <- solve(t(X)%*%X)%*%t(X)%*%y
w
# Estimando los coeficientes de regresión con la función lm()
modelo2 <- lm(protein~calories,data=train)
summary(modelo2)
w2 <- modelo2[["coefficients"]]
w2
# Estandarizando la columna calories
processTrain <- train
processTest <- test
pre_proc_val <- preProcess(processTrain[,'calories'], method = c("center", "scale"))
processTrain[,'calories'] <- predict(pre_proc_val, processTrain[,'calories'])
processTest[,'calories'] <- predict(pre_proc_val, processTest[,'calories'])
# Repitiendo OLS con la columna calories estandarizada
y2 <- train$protein
X2 <- cbind(rep(1,dim(processTrain)[1]),processTrain[["calories"]])
w3 <- solve(t(X2)%*%X2)%*%t(X2)%*%y2
w3
# Graficando OLS sin y con estandarización (arreglar, aún no funciona bien)
plot(train$fat, train$protein, main = 'OLS sin estandarización', xlab = 'Calories', ylab = 'Proteins')
abline(w)
plot(processTrain$calories, train$protein, main = 'OLS con estandarización', xlab = 'Calories', ylab = 'Proteins')
abline(w3)
### Script pregunta 3
pacman::p_load(tidyverse, openintro, ggplot2, caret)
set.seed(23)
## Parte 1
data(starbucks)
attach(starbucks)
summary(starbucks)
data <- select(starbucks, protein, calories)
# Separamos la DB en 5 conjuntos de datos.
index <- sample(1:5, 77, replace=TRUE)
data['grupo'] <- index
# Creamos dataset de entrenamiento y prueba.
train <- data[which(data$grupo == 1 | data$grupo == 2 | data$grupo == 3 | data$grupo == 4),]
test <- data[which(data$grupo == 5),]
# Estimando los coeficientes de regresión con Mínimos Cuadrados
y <- train$protein
X <- cbind(rep(1,dim(train)[1]),train[["calories"]])
w <- solve(t(X)%*%X)%*%t(X)%*%y
w
# Estimando los coeficientes de regresión con la función lm()
modelo2 <- lm(protein~calories,data=train)
summary(modelo2)
w2 <- modelo2[["coefficients"]]
w2
# Estandarizando la columna calories
processTrain <- train
processTest <- test
pre_proc_val <- preProcess(processTrain[,'calories'], method = c("center", "scale"))
processTrain[,'calories'] <- predict(pre_proc_val, processTrain[,'calories'])
processTest[,'calories'] <- predict(pre_proc_val, processTest[,'calories'])
# Repitiendo OLS con la columna calories estandarizada
y2 <- train$protein
X2 <- cbind(rep(1,dim(processTrain)[1]),processTrain[["calories"]])
w3 <- solve(t(X2)%*%X2)%*%t(X2)%*%y2
w3
# Graficando OLS sin y con estandarización (arreglar, aún no funciona bien)
plot(train$calories, train$protein, main = 'OLS sin estandarización', xlab = 'Calories', ylab = 'Proteins')
abline(w)
plot(processTrain$calories, train$protein, main = 'OLS con estandarización', xlab = 'Calories', ylab = 'Proteins')
abline(w3)
n=length(y)
plot(1:n,y2,type="l")
points(1:n,y_pred,col="2")
source("C:/Users/nosal/OneDrive - Universidad Adolfo Ibanez/Codes/Universidad/Kernels/Repo/tarea 1/parte3.R", echo=TRUE)
source("C:/Users/nosal/OneDrive - Universidad Adolfo Ibanez/Codes/Universidad/Kernels/Repo/tarea 1/parte3.R", echo=TRUE)
source("C:/Users/nosal/OneDrive - Universidad Adolfo Ibanez/Codes/Universidad/Kernels/Repo/tarea 1/parte3.R", echo=TRUE)
plot(test$calories, test$protein, main = 'Predicción OLS sin estandarización', xlab = 'Calories', ylab = 'Proteins')
abline(w)
points(y_pred)
plot(test$calories, y_pred, main = 'Predicción OLS sin estandarización', xlab = 'Calories', ylab = 'Proteins')
abline(w)
w
?plot
plot(test$calories, test$protein, main = 'Predicción OLS sin estandarización', xlab = 'Calories', ylab = 'Proteins', type = 'n')
points(X_pred, y_pred, col="2")
length(X_pred)
length(y_pred)
X_pred
test[["calories"]]
points(test[["calories"]], y_pred, col = '2')
abline(w)
rm(list=ls())
pacman::p_load(tidyverse, openintro, ggplot2, caret)
set.seed(23)
## Parte 1
data(starbucks)
attach(starbucks)
summary(starbucks)
data <- select(starbucks, protein, calories)
# Separamos la DB en 5 conjuntos de datos.
index <- sample(1:5, 77, replace=TRUE)
data['grupo'] <- index
# Creamos dataset de entrenamiento y prueba.
train <- data[which(data$grupo == 1 | data$grupo == 2 | data$grupo == 3 | data$grupo == 4),]
test <- data[which(data$grupo == 5),]
# Estimando los coeficientes de regresión con Mínimos Cuadrados
y <- train$protein
X <- cbind(rep(1,dim(train)[1]),train[["calories"]])
w <- solve(t(X)%*%X)%*%t(X)%*%y
w
# Estimando los coeficientes de regresión con la función lm()
modelo2 <- lm(protein~calories,data=train)
summary(modelo2)
w2 <- modelo2[["coefficients"]]
w2
# Estandarizando la columna calories
processTrain <- train
processTest <- test
pre_proc_val <- preProcess(processTrain[,'calories'], method = c("center", "scale"))
processTrain[,'calories'] <- predict(pre_proc_val, processTrain[,'calories'])
processTest[,'calories'] <- predict(pre_proc_val, processTest[,'calories'])
# Repitiendo OLS con la columna calories estandarizada
y2 <- train$protein
X2 <- cbind(rep(1,dim(processTrain)[1]),processTrain[["calories"]])
w3 <- solve(t(X2)%*%X2)%*%t(X2)%*%y2
w3
# Graficando OLS sin y con estandarización (arreglar, aún no funciona bien)
plot(train$calories, train$protein, main = 'OLS sin estandarización', xlab = 'Calories', ylab = 'Proteins')
abline(w)
plot(processTrain$calories, train$protein, main = 'OLS con estandarización', xlab = 'Calories', ylab = 'Proteins')
abline(w3)
# Predicción sin estandarización
X_pred <- cbind(rep(1,dim(test)[1]),test[["calories"]])
y_pred <- X_pred%*%w
y_pred
plot(test$calories, test$protein, main = 'Predicción OLS sin estandarización', xlab = 'Calories', ylab = 'Proteins')
points(test[["calories"]], y_pred, col = '2')
abline(w)
test$calories
test[["calories"]]
processTest[["calories"]]
processTest$calories
plot(processTest$calories, test$protein, main = 'Predicción OLS sin estandarización', xlab = 'Calories', ylab = 'Proteins')
points(processTest$calories, y_pred2, col = '2')
X_pred2 <- cbind(rep(1,dim(processTest)[1]), processTest$calories)
y_pred2 <- X_pred2%*%w3
y_pred2
plot(processTest$calories, test$protein, main = 'Predicción OLS sin estandarización', xlab = 'Calories', ylab = 'Proteins')
points(processTest$calories, y_pred2, col = '2')
abline(w3)
N=dim(test)[1]
N
source("C:/Users/nosal/OneDrive - Universidad Adolfo Ibanez/Codes/Universidad/Kernels/Repo/tarea 1/parte3.R", echo=TRUE)
source("C:/Users/nosal/OneDrive - Universidad Adolfo Ibanez/Codes/Universidad/Kernels/Repo/tarea 1/parte3.R", echo=TRUE)
